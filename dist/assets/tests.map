{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","fieldr-front-end/tests/adapters/application.jshint.lint-test.js","fieldr-front-end/tests/adapters/plateappearance-edit.jshint.lint-test.js","fieldr-front-end/tests/adapters/plateappearance.jshint.lint-test.js","fieldr-front-end/tests/app.jshint.lint-test.js","fieldr-front-end/tests/components/box-score.jshint.lint-test.js","fieldr-front-end/tests/components/change-password-form.jshint.lint-test.js","fieldr-front-end/tests/components/create-plateappearance-form.jshint.lint-test.js","fieldr-front-end/tests/components/edit-game-form.jshint.lint-test.js","fieldr-front-end/tests/components/edit-plateappearance-form.jshint.lint-test.js","fieldr-front-end/tests/components/email-input.jshint.lint-test.js","fieldr-front-end/tests/components/game-breakdown.jshint.lint-test.js","fieldr-front-end/tests/components/game-list-item.jshint.lint-test.js","fieldr-front-end/tests/components/hamburger-menu.jshint.lint-test.js","fieldr-front-end/tests/components/jumbo-page.jshint.lint-test.js","fieldr-front-end/tests/components/my-application.jshint.lint-test.js","fieldr-front-end/tests/components/navbar-header.jshint.lint-test.js","fieldr-front-end/tests/components/new-game-form.jshint.lint-test.js","fieldr-front-end/tests/components/password-confirmation-input.jshint.lint-test.js","fieldr-front-end/tests/components/password-input.jshint.lint-test.js","fieldr-front-end/tests/components/plateappearance-box.jshint.lint-test.js","fieldr-front-end/tests/components/sign-in-form.jshint.lint-test.js","fieldr-front-end/tests/components/sign-up-form.jshint.lint-test.js","fieldr-front-end/tests/helpers/and.jshint.lint-test.js","fieldr-front-end/tests/helpers/destroy-app.js","fieldr-front-end/tests/helpers/destroy-app.jshint.lint-test.js","fieldr-front-end/tests/helpers/eq.jshint.lint-test.js","fieldr-front-end/tests/helpers/flash-message.js","fieldr-front-end/tests/helpers/flash-message.jshint.lint-test.js","fieldr-front-end/tests/helpers/module-for-acceptance.js","fieldr-front-end/tests/helpers/module-for-acceptance.jshint.lint-test.js","fieldr-front-end/tests/helpers/noeq.jshint.lint-test.js","fieldr-front-end/tests/helpers/resolver.js","fieldr-front-end/tests/helpers/resolver.jshint.lint-test.js","fieldr-front-end/tests/helpers/responsive.js","fieldr-front-end/tests/helpers/responsive.jshint.lint-test.js","fieldr-front-end/tests/helpers/start-app.js","fieldr-front-end/tests/helpers/start-app.jshint.lint-test.js","fieldr-front-end/tests/initializers/text-field.jshint.lint-test.js","fieldr-front-end/tests/integration/components/box-score-test.js","fieldr-front-end/tests/integration/components/box-score-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/change-password-form-test.js","fieldr-front-end/tests/integration/components/change-password-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/create-pa-form-test.js","fieldr-front-end/tests/integration/components/create-pa-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/edit-game-form-test.js","fieldr-front-end/tests/integration/components/edit-game-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/edit-plateappearance-form-test.js","fieldr-front-end/tests/integration/components/edit-plateappearance-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/email-input-test.js","fieldr-front-end/tests/integration/components/email-input-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/game-breakdown-test.js","fieldr-front-end/tests/integration/components/game-breakdown-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/game-list-item-test.js","fieldr-front-end/tests/integration/components/game-list-item-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/hamburger-menu-test.js","fieldr-front-end/tests/integration/components/hamburger-menu-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/inning-half-dropdown-test.js","fieldr-front-end/tests/integration/components/inning-half-dropdown-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/jumbo-page-test.js","fieldr-front-end/tests/integration/components/jumbo-page-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/my-application-test.js","fieldr-front-end/tests/integration/components/my-application-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/navbar-header-test.js","fieldr-front-end/tests/integration/components/navbar-header-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/new-game-form-test.js","fieldr-front-end/tests/integration/components/new-game-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/pa-box-test.js","fieldr-front-end/tests/integration/components/pa-box-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/password-confirmation-input-test.js","fieldr-front-end/tests/integration/components/password-confirmation-input-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/password-input-test.js","fieldr-front-end/tests/integration/components/password-input-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/sign-in-form-test.js","fieldr-front-end/tests/integration/components/sign-in-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/sign-up-form-test.js","fieldr-front-end/tests/integration/components/sign-up-form-test.jshint.lint-test.js","fieldr-front-end/tests/integration/components/simple-table-test.js","fieldr-front-end/tests/integration/components/simple-table-test.jshint.lint-test.js","fieldr-front-end/tests/models/game.jshint.lint-test.js","fieldr-front-end/tests/models/plateappearance.jshint.lint-test.js","fieldr-front-end/tests/models/user.jshint.lint-test.js","fieldr-front-end/tests/resolver.jshint.lint-test.js","fieldr-front-end/tests/router.jshint.lint-test.js","fieldr-front-end/tests/routes/application.jshint.lint-test.js","fieldr-front-end/tests/routes/change-password.jshint.lint-test.js","fieldr-front-end/tests/routes/edit-game.jshint.lint-test.js","fieldr-front-end/tests/routes/game.jshint.lint-test.js","fieldr-front-end/tests/routes/games.jshint.lint-test.js","fieldr-front-end/tests/routes/index.jshint.lint-test.js","fieldr-front-end/tests/routes/plateappearance-edit.jshint.lint-test.js","fieldr-front-end/tests/routes/plateappearance.jshint.lint-test.js","fieldr-front-end/tests/routes/plateappearances.jshint.lint-test.js","fieldr-front-end/tests/routes/sign-in.jshint.lint-test.js","fieldr-front-end/tests/routes/sign-up.jshint.lint-test.js","fieldr-front-end/tests/routes/users.jshint.lint-test.js","fieldr-front-end/tests/serializers/application.jshint.lint-test.js","fieldr-front-end/tests/services/ajax.jshint.lint-test.js","fieldr-front-end/tests/services/auth.jshint.lint-test.js","fieldr-front-end/tests/storages/auth.jshint.lint-test.js","fieldr-front-end/tests/test-helper.js","fieldr-front-end/tests/test-helper.jshint.lint-test.js","fieldr-front-end/tests/unit/adapters/application-test.js","fieldr-front-end/tests/unit/adapters/application-test.jshint.lint-test.js","fieldr-front-end/tests/unit/adapters/auth-test.js","fieldr-front-end/tests/unit/adapters/auth-test.jshint.lint-test.js","fieldr-front-end/tests/unit/helpers/and-test.js","fieldr-front-end/tests/unit/helpers/and-test.jshint.lint-test.js","fieldr-front-end/tests/unit/helpers/eq-test.js","fieldr-front-end/tests/unit/helpers/eq-test.jshint.lint-test.js","fieldr-front-end/tests/unit/helpers/sf-table-test.js","fieldr-front-end/tests/unit/helpers/sf-table-test.jshint.lint-test.js","fieldr-front-end/tests/unit/initializers/text-field-test.js","fieldr-front-end/tests/unit/initializers/text-field-test.jshint.lint-test.js","fieldr-front-end/tests/unit/models/application-test.js","fieldr-front-end/tests/unit/models/application-test.jshint.lint-test.js","fieldr-front-end/tests/unit/models/auth-test.js","fieldr-front-end/tests/unit/models/auth-test.jshint.lint-test.js","fieldr-front-end/tests/unit/models/user-test.js","fieldr-front-end/tests/unit/models/user-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/application-test.js","fieldr-front-end/tests/unit/routes/application-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/change-password-test.js","fieldr-front-end/tests/unit/routes/change-password-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/edit-game-test.js","fieldr-front-end/tests/unit/routes/edit-game-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/game-test.js","fieldr-front-end/tests/unit/routes/game-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/games-test.js","fieldr-front-end/tests/unit/routes/games-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/index-test.js","fieldr-front-end/tests/unit/routes/index-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/new-plateappearance-test.js","fieldr-front-end/tests/unit/routes/new-plateappearance-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/pa-test.js","fieldr-front-end/tests/unit/routes/pa-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/pas-test.js","fieldr-front-end/tests/unit/routes/pas-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/plateappearance-edit-test.js","fieldr-front-end/tests/unit/routes/plateappearance-edit-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/sign-in-test.js","fieldr-front-end/tests/unit/routes/sign-in-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/sign-up-test.js","fieldr-front-end/tests/unit/routes/sign-up-test.jshint.lint-test.js","fieldr-front-end/tests/unit/routes/users-test.js","fieldr-front-end/tests/unit/routes/users-test.jshint.lint-test.js","fieldr-front-end/tests/unit/serializers/application-test.js","fieldr-front-end/tests/unit/serializers/application-test.jshint.lint-test.js","fieldr-front-end/tests/unit/serializers/auth-test.js","fieldr-front-end/tests/unit/serializers/auth-test.jshint.lint-test.js","fieldr-front-end/tests/unit/services/ajax-test.js","fieldr-front-end/tests/unit/services/ajax-test.jshint.lint-test.js","fieldr-front-end/tests/unit/services/auth-test.js","fieldr-front-end/tests/unit/services/auth-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('fieldr-front-end/tests/adapters/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/adapters/plateappearance-edit.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/plateappearance-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/plateappearance-edit.js should pass jshint.\\nadapters/plateappearance-edit.js: line 5, col 33, Missing semicolon.\\nadapters/plateappearance-edit.js: line 6, col 65, Missing semicolon.\\nadapters/plateappearance-edit.js: line 7, col 38, Missing semicolon.\\nadapters/plateappearance-edit.js: line 8, col 44, Missing semicolon.\\nadapters/plateappearance-edit.js: line 9, col 79, Missing semicolon.\\nadapters/plateappearance-edit.js: line 10, col 47, Missing semicolon.\\nadapters/plateappearance-edit.js: line 11, col 41, Missing semicolon.\\n\\n7 errors');\n  });\n});","define('fieldr-front-end/tests/adapters/plateappearance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/plateappearance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/plateappearance.js should pass jshint.\\nadapters/plateappearance.js: line 5, col 33, Missing semicolon.\\nadapters/plateappearance.js: line 6, col 65, Missing semicolon.\\nadapters/plateappearance.js: line 7, col 38, Missing semicolon.\\nadapters/plateappearance.js: line 8, col 58, Missing semicolon.\\nadapters/plateappearance.js: line 9, col 47, Missing semicolon.\\nadapters/plateappearance.js: line 10, col 42, Missing semicolon.\\n\\n6 errors');\n  });\n});","define('fieldr-front-end/tests/app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/box-score.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/box-score.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/box-score.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/change-password-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/change-password-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/change-password-form.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/create-plateappearance-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/create-plateappearance-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/create-plateappearance-form.js should pass jshint.\\ncomponents/create-plateappearance-form.js: line 16, col 30, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 17, col 60, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 20, col 54, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 23, col 79, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 24, col 50, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 25, col 54, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 26, col 45, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 27, col 45, Missing semicolon.\\ncomponents/create-plateappearance-form.js: line 28, col 50, Missing semicolon.\\n\\n9 errors');\n  });\n});","define('fieldr-front-end/tests/components/edit-game-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/edit-game-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/edit-game-form.js should pass jshint.\\ncomponents/edit-game-form.js: line 6, col 54, Missing semicolon.\\ncomponents/edit-game-form.js: line 5, col 16, \\'game\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('fieldr-front-end/tests/components/edit-plateappearance-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/edit-plateappearance-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/edit-plateappearance-form.js should pass jshint.\\ncomponents/edit-plateappearance-form.js: line 6, col 58, Missing semicolon.\\ncomponents/edit-plateappearance-form.js: line 9, col 64, Missing semicolon.\\ncomponents/edit-plateappearance-form.js: line 12, col 74, Missing semicolon.\\ncomponents/edit-plateappearance-form.js: line 11, col 26, \\'plateappearance\\' is defined but never used.\\n\\n4 errors');\n  });\n});","define('fieldr-front-end/tests/components/email-input.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/email-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/email-input.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/game-breakdown.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/game-breakdown.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/game-breakdown.js should pass jshint.\\ncomponents/game-breakdown.js: line 6, col 46, Missing semicolon.\\ncomponents/game-breakdown.js: line 7, col 71, Missing semicolon.\\ncomponents/game-breakdown.js: line 10, col 35, Missing semicolon.\\ncomponents/game-breakdown.js: line 11, col 71, Missing semicolon.\\n\\n4 errors');\n  });\n});","define('fieldr-front-end/tests/components/game-list-item.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/game-list-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/game-list-item.js should pass jshint.\\ncomponents/game-list-item.js: line 7, col 61, Missing semicolon.\\n\\n1 error');\n  });\n});","define('fieldr-front-end/tests/components/hamburger-menu.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/hamburger-menu.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/hamburger-menu.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/jumbo-page.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/jumbo-page.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/jumbo-page.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/my-application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/my-application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/my-application.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/navbar-header.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/navbar-header.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/navbar-header.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/new-game-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/new-game-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/new-game-form.js should pass jshint.\\ncomponents/new-game-form.js: line 11, col 57, Missing semicolon.\\ncomponents/new-game-form.js: line 12, col 37, Missing semicolon.\\ncomponents/new-game-form.js: line 13, col 37, Missing semicolon.\\ncomponents/new-game-form.js: line 14, col 37, Missing semicolon.\\n\\n4 errors');\n  });\n});","define('fieldr-front-end/tests/components/password-confirmation-input.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/password-confirmation-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/password-confirmation-input.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/password-input.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/password-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/password-input.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/plateappearance-box.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/plateappearance-box.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/plateappearance-box.js should pass jshint.\\ncomponents/plateappearance-box.js: line 6, col 83, Missing semicolon.\\n\\n1 error');\n  });\n});","define('fieldr-front-end/tests/components/sign-in-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/sign-in-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sign-in-form.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/components/sign-up-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/sign-up-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sign-up-form.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/and.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/and.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/and.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('fieldr-front-end/tests/helpers/destroy-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/eq.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/eq.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/eq.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/flash-message', ['exports', 'ember', 'ember-cli-flash/flash/object'], function (exports, _ember, _emberCliFlashFlashObject) {\n  var K = _ember['default'].K;\n\n  _emberCliFlashFlashObject['default'].reopen({ init: K });\n});","define('fieldr-front-end/tests/helpers/flash-message.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/flash-message.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/flash-message.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'fieldr-front-end/tests/helpers/start-app', 'fieldr-front-end/tests/helpers/destroy-app'], function (exports, _qunit, _fieldrFrontEndTestsHelpersStartApp, _fieldrFrontEndTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _fieldrFrontEndTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _fieldrFrontEndTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('fieldr-front-end/tests/helpers/module-for-acceptance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/noeq.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/noeq.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/noeq.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/resolver', ['exports', 'fieldr-front-end/resolver', 'fieldr-front-end/config/environment'], function (exports, _fieldrFrontEndResolver, _fieldrFrontEndConfigEnvironment) {\n\n  var resolver = _fieldrFrontEndResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _fieldrFrontEndConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _fieldrFrontEndConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('fieldr-front-end/tests/helpers/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/responsive', ['exports', 'ember', 'ember-responsive/media'], function (exports, _ember, _emberResponsiveMedia) {\n  exports.setBreakpointForIntegrationTest = setBreakpointForIntegrationTest;\n  var getOwner = _ember['default'].getOwner;\n  var classify = _ember['default'].String.classify;\n\n  _emberResponsiveMedia['default'].reopen({\n    // Change this if you want a different default breakpoint in tests.\n    _defaultBreakpoint: 'desktop',\n\n    _breakpointArr: _ember['default'].computed('breakpoints', function () {\n      return Object.keys(this.get('breakpoints')) || _ember['default'].A([]);\n    }),\n\n    _forceSetBreakpoint: function _forceSetBreakpoint(breakpoint) {\n      var found = false;\n\n      var props = {};\n      this.get('_breakpointArr').forEach(function (bp) {\n        var val = bp === breakpoint;\n        if (val) {\n          found = true;\n        }\n\n        props['is' + classify(bp)] = val;\n      });\n\n      if (found) {\n        this.setProperties(props);\n      } else {\n        throw new Error('You tried to set the breakpoint to ' + breakpoint + ', which is not in your app/breakpoint.js file.');\n      }\n    },\n\n    match: function match() {}, // do not set up listeners in test\n\n    init: function init() {\n      this._super.apply(this, arguments);\n\n      this._forceSetBreakpoint(this.get('_defaultBreakpoint'));\n    }\n  });\n\n  exports['default'] = _ember['default'].Test.registerAsyncHelper('setBreakpoint', function (app, breakpoint) {\n    // this should use getOwner once that's supported\n    var mediaService = app.__deprecatedInstance__.lookup('service:media');\n    mediaService._forceSetBreakpoint(breakpoint);\n  });\n\n  function setBreakpointForIntegrationTest(container, breakpoint) {\n    var mediaService = getOwner(container).lookup('service:media');\n    mediaService._forceSetBreakpoint(breakpoint);\n    container.set('media', mediaService);\n\n    return mediaService;\n  }\n});","define('fieldr-front-end/tests/helpers/responsive.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/responsive.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/responsive.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/helpers/start-app', ['exports', 'ember', 'fieldr-front-end/app', 'fieldr-front-end/config/environment'], function (exports, _ember, _fieldrFrontEndApp, _fieldrFrontEndConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _fieldrFrontEndConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _fieldrFrontEndApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('fieldr-front-end/tests/helpers/start-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/initializers/text-field.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/text-field.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/text-field.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/box-score-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('box-score', 'Integration | Component | box score', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'D9fgFt+O',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"box-score\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'ivT+IhzN',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"box-score\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/box-score-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/box-score-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/box-score-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/change-password-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('change-password-form', 'Integration | Component | change password form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'vzv/UbXi',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"change-password-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'W+lopJXu',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"change-password-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/change-password-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/change-password-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/change-password-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/create-pa-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('create-pa-form', 'Integration | Component | create pa form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'kFLU625e',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"create-pa-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '/7AiB0G0',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"create-pa-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/create-pa-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/create-pa-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/create-pa-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/edit-game-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('edit-game-form', 'Integration | Component | edit game form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '3iAZJTG5',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"edit-game-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'SnSUhTOG',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"edit-game-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/edit-game-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/edit-game-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-game-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/edit-plateappearance-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('edit-plateappearance-form', 'Integration | Component | edit plateappearance form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'renLNWNk',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"edit-plateappearance-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '+onj8gaj',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"edit-plateappearance-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/edit-plateappearance-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/edit-plateappearance-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-plateappearance-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/email-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('email-input', 'Integration | Component | email input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '6ZlF6XfM',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"email-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'YM0cFao3',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"email-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/email-input-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/email-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/email-input-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/game-breakdown-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('game-breakdown', 'Integration | Component | game breakdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '8hAa2+RT',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"game-breakdown\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 's6yck9BE',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"game-breakdown\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/game-breakdown-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/game-breakdown-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/game-breakdown-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/game-list-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('game-list-item', 'Integration | Component | game list item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'bnT7wkJ5',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"game-list-item\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'ndu7E7/t',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"game-list-item\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/game-list-item-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/game-list-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/game-list-item-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/hamburger-menu-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('hamburger-menu', 'Integration | Component | hamburger menu', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '6jCz0Egi',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"hamburger-menu\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '+8WkWzqb',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"hamburger-menu\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/hamburger-menu-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/hamburger-menu-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/hamburger-menu-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/inning-half-dropdown-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('inning-half-dropdown', 'Integration | Component | inning half dropdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'MB/bzMyk',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"inning-half-dropdown\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'tOaHhQx6',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"inning-half-dropdown\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/inning-half-dropdown-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/inning-half-dropdown-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/inning-half-dropdown-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/jumbo-page-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('jumbo-page', 'Integration | Component | jumbo page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '36zkDvpI',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"jumbo-page\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Vbn3aD9O',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"jumbo-page\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/jumbo-page-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/jumbo-page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/jumbo-page-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/my-application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('my-application', 'Integration | Component | my application', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'KxgFQCKC',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"my-application\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'kguz0DrD',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"my-application\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/my-application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/my-application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/my-application-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/navbar-header-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('navbar-header', 'Integration | Component | navbar header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'jsAxs+PS',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"navbar-header\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'UCOelAVk',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"navbar-header\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/navbar-header-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/navbar-header-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/navbar-header-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/new-game-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('new-game-form', 'Integration | Component | new game form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'RJ8nqFCd',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"new-game-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '0wD4Q9CW',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"new-game-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/new-game-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/new-game-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/new-game-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/pa-box-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('pa-box', 'Integration | Component | pa box', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'fVyY3g5R',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"pa-box\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Say8033/',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"pa-box\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/pa-box-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/pa-box-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pa-box-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/password-confirmation-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('password-confirmation-input', 'Integration | Component | password confirmation input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'iIL5Yl+z',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"password-confirmation-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'tkVExn4c',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"password-confirmation-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/password-confirmation-input-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/password-confirmation-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/password-confirmation-input-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/password-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('password-input', 'Integration | Component | password input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'qKa4/eNs',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"password-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'zLQB4Ctb',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"password-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/password-input-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/password-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/password-input-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/sign-in-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sign-in-form', 'Integration | Component | sign in form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'iWgfKNlK',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"sign-in-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '0kWL1c/7',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"sign-in-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/sign-in-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/sign-in-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/sign-in-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/sign-up-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sign-up-form', 'Integration | Component | sign up form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'oWx+CZzU',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"sign-up-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '2eGtA79t',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"sign-up-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/sign-up-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/sign-up-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/sign-up-form-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/integration/components/simple-table-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('simple-table', 'Integration | Component | simple table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'ETIgs/yD',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"simple-table\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'KQodBu7d',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"simple-table\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fieldr-front-end/tests/integration/components/simple-table-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/simple-table-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/simple-table-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/models/game.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | models/game.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/game.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/models/plateappearance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | models/plateappearance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/plateappearance.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/models/user.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/router.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 16, col 79, Missing semicolon.\\n\\n1 error');\n  });\n});","define('fieldr-front-end/tests/routes/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/routes/change-password.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/change-password.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/change-password.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/routes/edit-game.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/edit-game.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/edit-game.js should pass jshint.\\nroutes/edit-game.js: line 6, col 18, Missing semicolon.\\nroutes/edit-game.js: line 7, col 33, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('fieldr-front-end/tests/routes/game.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/game.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/game.js should pass jshint.\\nroutes/game.js: line 5, col 37, Missing semicolon.\\nroutes/game.js: line 7, col 41, Missing semicolon.\\nroutes/game.js: line 8, col 23, Missing semicolon.\\nroutes/game.js: line 12, col 38, Missing semicolon.\\nroutes/game.js: line 13, col 13, Missing semicolon.\\nroutes/game.js: line 17, col 43, Missing semicolon.\\nroutes/game.js: line 18, col 23, Missing semicolon.\\nroutes/game.js: line 19, col 23, Missing semicolon.\\nroutes/game.js: line 20, col 23, Missing semicolon.\\nroutes/game.js: line 21, col 23, Missing semicolon.\\nroutes/game.js: line 22, col 25, Missing semicolon.\\nroutes/game.js: line 23, col 25, Missing semicolon.\\nroutes/game.js: line 24, col 21, Missing semicolon.\\nroutes/game.js: line 25, col 21, Missing semicolon.\\nroutes/game.js: line 26, col 21, Missing semicolon.\\nroutes/game.js: line 27, col 21, Missing semicolon.\\nroutes/game.js: line 28, col 23, Missing semicolon.\\nroutes/game.js: line 29, col 23, Missing semicolon.\\nroutes/game.js: line 30, col 22, Missing semicolon.\\nroutes/game.js: line 31, col 22, Missing semicolon.\\nroutes/game.js: line 32, col 22, Missing semicolon.\\nroutes/game.js: line 33, col 22, Missing semicolon.\\nroutes/game.js: line 34, col 21, Missing semicolon.\\nroutes/game.js: line 35, col 21, Missing semicolon.\\nroutes/game.js: line 36, col 23, Missing semicolon.\\nroutes/game.js: line 37, col 23, Missing semicolon.\\nroutes/game.js: line 38, col 23, Missing semicolon.\\nroutes/game.js: line 39, col 23, Missing semicolon.\\nroutes/game.js: line 40, col 22, Missing semicolon.\\nroutes/game.js: line 41, col 22, Missing semicolon.\\nroutes/game.js: line 42, col 74, Missing semicolon.\\nroutes/game.js: line 45, col 37, Missing semicolon.\\nroutes/game.js: line 46, col 44, Missing semicolon.\\nroutes/game.js: line 48, col 26, Missing semicolon.\\nroutes/game.js: line 51, col 37, Missing semicolon.\\nroutes/game.js: line 53, col 37, Missing semicolon.\\nroutes/game.js: line 55, col 39, Missing semicolon.\\nroutes/game.js: line 57, col 38, Missing semicolon.\\nroutes/game.js: line 59, col 38, Missing semicolon.\\nroutes/game.js: line 61, col 37, Missing semicolon.\\nroutes/game.js: line 63, col 39, Missing semicolon.\\nroutes/game.js: line 65, col 39, Missing semicolon.\\nroutes/game.js: line 67, col 38, Missing semicolon.\\nroutes/game.js: line 70, col 37, Missing semicolon.\\nroutes/game.js: line 71, col 44, Missing semicolon.\\nroutes/game.js: line 73, col 26, Missing semicolon.\\nroutes/game.js: line 76, col 37, Missing semicolon.\\nroutes/game.js: line 78, col 37, Missing semicolon.\\nroutes/game.js: line 80, col 39, Missing semicolon.\\nroutes/game.js: line 82, col 38, Missing semicolon.\\nroutes/game.js: line 82, col 38, Too many errors. (59% scanned).\\n\\n51 errors');\n  });\n});","define('fieldr-front-end/tests/routes/games.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/games.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/games.js should pass jshint.\\nroutes/games.js: line 5, col 45, Missing semicolon.\\nroutes/games.js: line 11, col 65, Missing semicolon.\\nroutes/games.js: line 12, col 21, Missing semicolon.\\nroutes/games.js: line 15, col 27, Missing semicolon.\\n\\n4 errors');\n  });\n});","define('fieldr-front-end/tests/routes/index.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/routes/plateappearance-edit.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/plateappearance-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/plateappearance-edit.js should pass jshint.\\nroutes/plateappearance-edit.js: line 5, col 86, Missing semicolon.\\nroutes/plateappearance-edit.js: line 9, col 25, Missing semicolon.\\nroutes/plateappearance-edit.js: line 10, col 29, Missing semicolon.\\nroutes/plateappearance-edit.js: line 9, col 13, \\'scope\\' is defined but never used.\\n\\n4 errors');\n  });\n});","define('fieldr-front-end/tests/routes/plateappearance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/plateappearance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/plateappearance.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/routes/plateappearances.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/plateappearances.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/plateappearances.js should pass jshint.\\nroutes/plateappearances.js: line 5, col 56, Missing semicolon.\\n\\n1 error');\n  });\n});","define('fieldr-front-end/tests/routes/sign-in.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/sign-in.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sign-in.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/routes/sign-up.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/sign-up.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sign-up.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/routes/users.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/serializers/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/services/ajax.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/ajax.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/services/auth.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/auth.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/auth.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/storages/auth.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | storages/auth.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'storages/auth.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/test-helper', ['exports', 'fieldr-front-end/tests/helpers/resolver', 'fieldr-front-end/tests/helpers/responsive', 'fieldr-front-end/tests/helpers/flash-message', 'ember-qunit'], function (exports, _fieldrFrontEndTestsHelpersResolver, _fieldrFrontEndTestsHelpersResponsive, _fieldrFrontEndTestsHelpersFlashMessage, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_fieldrFrontEndTestsHelpersResolver['default']);\n});","define('fieldr-front-end/tests/test-helper.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('fieldr-front-end/tests/unit/adapters/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/adapters/auth-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:auth', 'Unit | Adapter | auth', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('fieldr-front-end/tests/unit/adapters/auth-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/auth-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/auth-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/helpers/and-test', ['exports', 'fieldr-front-end/helpers/and', 'qunit'], function (exports, _fieldrFrontEndHelpersAnd, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | and');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fieldrFrontEndHelpersAnd.and)([42]);\n    assert.ok(result);\n  });\n});","define('fieldr-front-end/tests/unit/helpers/and-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/and-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/and-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/helpers/eq-test', ['exports', 'fieldr-front-end/helpers/eq', 'qunit'], function (exports, _fieldrFrontEndHelpersEq, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | eq');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fieldrFrontEndHelpersEq.eq)([42]);\n    assert.ok(result);\n  });\n});","define('fieldr-front-end/tests/unit/helpers/eq-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/eq-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/eq-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/helpers/sf-table-test', ['exports', 'fieldr-front-end/helpers/sf-table', 'qunit'], function (exports, _fieldrFrontEndHelpersSfTable, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | sf table');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fieldrFrontEndHelpersSfTable.sfTable)([42]);\n    assert.ok(result);\n  });\n});","define('fieldr-front-end/tests/unit/helpers/sf-table-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/sf-table-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sf-table-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/initializers/text-field-test', ['exports', 'ember', 'fieldr-front-end/initializers/text-field', 'qunit'], function (exports, _ember, _fieldrFrontEndInitializersTextField, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | text field', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _fieldrFrontEndInitializersTextField['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('fieldr-front-end/tests/unit/initializers/text-field-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/text-field-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/text-field-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/models/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Model | application', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fieldr-front-end/tests/unit/models/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/application-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/models/auth-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('auth', 'Unit | Model | auth', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fieldr-front-end/tests/unit/models/auth-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/auth-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/auth-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fieldr-front-end/tests/unit/models/user-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/change-password-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:change-password', 'Unit | Route | change password', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/change-password-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/change-password-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/change-password-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/edit-game-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:edit-game', 'Unit | Route | edit game', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/edit-game-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/edit-game-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-game-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/game-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:game', 'Unit | Route | game', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/game-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/game-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/games-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:games', 'Unit | Route | games', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/games-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/games-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/games-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/index-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/new-plateappearance-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new-plateappearance', 'Unit | Route | new plateappearance', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/new-plateappearance-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/new-plateappearance-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-plateappearance-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/pa-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:pa', 'Unit | Route | pa', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/pa-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/pa-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/pa-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/pas-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:pas', 'Unit | Route | pas', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/pas-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/pas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/pas-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/plateappearance-edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:plateappearance-edit', 'Unit | Route | plateappearance edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/plateappearance-edit-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/plateappearance-edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/plateappearance-edit-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/sign-in-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sign-in', 'Unit | Route | sign in', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/sign-in-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/sign-in-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sign-in-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/sign-up-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sign-up', 'Unit | Route | sign up', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/sign-up-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/sign-up-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sign-up-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/routes/users-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:users', 'Unit | Route | users', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fieldr-front-end/tests/unit/routes/users-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/users-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/users-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('fieldr-front-end/tests/unit/serializers/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/serializers/auth-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('auth', 'Unit | Serializer | auth', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:auth']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('fieldr-front-end/tests/unit/serializers/auth-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/auth-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/auth-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/services/ajax-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('fieldr-front-end/tests/unit/services/ajax-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/ajax-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass jshint.');\n  });\n});","define('fieldr-front-end/tests/unit/services/auth-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:auth', 'Unit | Service | auth', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('fieldr-front-end/tests/unit/services/auth-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/auth-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/auth-test.js should pass jshint.');\n  });\n});","require('fieldr-front-end/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;","file":"tests.js"}